/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <behaviors.dtsi>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors/mouse_key_press.dtsi>
#include <behaviors/mouse_key_toggle.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/input_transform.h>

#include <input/processors/report_rate_limit.dtsi>
&zip_report_rate_limit {
	report-ms = <12>;
};

#define DEF 0
#define LHB 1
#define PCE 2
#define MSC 3
#define CFG 4

/ {
        xy_transf: xy_transf {
                compatible = "zmk,input-processor-transform";
                #input-processor-cells = <1>;
                type = <INPUT_EV_REL>;
                x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
                y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
        };
        xy_scaler: xy_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>, <INPUT_REL_Y>;
                track-remainders;
        };
        x_scaler: x_scaler {
                compatible = "zmk,input-processor-scaler";
                #input-processor-cells = <2>;
                type = <INPUT_EV_REL>;
                codes = <INPUT_REL_X>;
        };
        to_wheel: to_wheel {
                compatible = "zmk,input-processor-code-mapper";
                #input-processor-cells = <0>;
                type = <INPUT_EV_REL>;
                map = <INPUT_REL_X INPUT_REL_MISC>, <INPUT_REL_Y INPUT_REL_WHEEL>;
        };

        mou0_mmv_il {
                compatible = "zmk,input-listener";
                device = <&pd0>;
                input-processors = <&xy_transf (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_Y_INVERT)>
                                 , <&zip_report_rate_limit>
                                 ;
                precise {
                        layers = <PCE>;
                        process-next;
                        input-processors = <&xy_scaler 2 3>;
                };
                scroll {
                        layers = <MSC>;
                        process-next;
                        input-processors = <&xy_scaler 1 40>, <&x_scaler 0 1>
                                         , <&to_wheel>;
                };
        };

        behaviors {
                hmkp_tg: hold_mouse_key_press_tap_toggle {
                        compatible = "zmk,behavior-hold-tap"; #binding-cells = <2>;
                        tapping-term-ms = <200>; quick-tap-ms = <200>;
                        flavor = "tap-preferred"; bindings = <&mkp>, <&tog>;
                };
                ec_s: mouse_scroll {
                        compatible = "zmk,behavior-input-two-axis";
                        #binding-cells = <1>;
                        trigger-period-ms = <12>; // slow down for OTA, default is 3ms
                        x-input-code = <INPUT_REL_HWHEEL>;
                        y-input-code = <INPUT_REL_WHEEL>;
                        time-to-max-speed-ms = <177>;
                        acceleration-exponent = <0>;
                };
                rot_enc: sensor_rotate {
                        compatible = "zmk,behavior-sensor-rotate";
                        #sensor-binding-cells = <0>;
                        bindings = <&ec_s MOVE_Y(-37)>, <&ec_s MOVE_Y(37)>;
                        tap-ms = <65>;
                };
        };

        //*** Top project of key positins ***
        //   0   3   6   <-- physical layout of L/M/R mouse button key
        //     1   2     <-- shoulder twins key
        //   4       5   <-- the side buttons
        //   7       8
        combos {
                compatible = "zmk,combos";

                mo_precise_layer {
                        timeout-ms = <80>;
                        key-positions = <4 5>;
                        bindings = <&mo PCE>;
                        layers = < DEF LHB CFG PCE MSC >;
                };

                tog_cfg_layer {
                        timeout-ms = <120>;
                        key-positions = <1 2>;
                        bindings = <&tog CFG>;
                        layers = < DEF LHB CFG PCE MSC >;
                };
        };

        keymap {
                compatible = "zmk,keymap";
                default_layer {
                        display-name = "Default";
                        bindings = <
   &mkp LCLK   &mo MSC             &hmkp_tg MCLK MSC
   &mkp MCLK   &mkp MB5            &mkp MB5
   &mkp RCLK   &mkp MB4            &mkp MB4
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                left_hand_layer {
                        display-name = "Left Hand";
                        bindings = <
   &mkp RCLK   &hmkp_tg MCLK MSC   &mo MSC
   &mkp MCLK   &trans              &trans
   &mkp LCLK   &trans              &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                PCE_layer {
                        display-name = "Precise";
                        bindings = <
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                MSC_layer {
                        display-name = "Scroll";
                        bindings = <
   &trans   &trans   &trans
   &trans   &trans   &trans
   &trans   &trans   &trans
                        >;
                        sensor-bindings = <&rot_enc>;
                };
                CFG_layer {
                        display-name = "Precise";
                        bindings = <
   &trans   &trans   &trans
   &trans   &bt BT_SEL 0   &bt BT_SEL 1
   &trans   &bt BT_SEL 2   &bt BT_CLR
                        >;
                        sensor-bindings = <&rot_enc>;
                };
       };
};
